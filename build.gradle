apply from: 'gradle/libraries.gradle'

apply plugin: 'com.github.ben-manes.versions'

buildscript {

    // I need build script classpath for foreign plugins
    repositories {
        maven { url 'http://nexus.lhotse.ov.otto.de:8080/content/groups/public' }
    }

    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.9'
    }
}

// http://blog.joda.org/2014/02/turning-off-doclint-in-jdk-8-javadoc.html
if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

allprojects {
    apply plugin: 'idea'
    version = '0.13.7-jersey2'
    if (!project.hasProperty('isRelease')) {
         version += '-SNAPSHOT'
    }
    group = 'de.otto'
}

idea {
  project {
    languageLevel = '1.7'
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.4'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    test {
        useTestNG()
    }

    repositories {
        maven { url 'http://nexus.lhotse.ov.otto.de:8080/content/groups/public' }
    }

    configurations {
        archives
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    uploadArchives {
        configuration = configurations.archives
        repositories {
            mavenDeployer {
                repository(url: nexusReleaseUrl) {
                    authentication(userName: nexusReleaseUsername, password: nexusReleasePassword)
                }
                snapshotRepository(url: nexusSnapshotUrl) {
                    authentication(userName: nexusSnapshotUsername, password: nexusSnapshotPassword)
                }
            }
        }
    }

    ext.cobSerFile="${project.buildDir}/cobertura.ser"
    ext.classesDir="${sourceSets.main.output.classesDir}"
    ext.copyOfClassesDir="${classesDir}-not-instrumented"

    task cobertura (type: Test) {

        jvmArgs '-XX:-UseSplitVerifier'

        useTestNG()
        systemProperties ["net.sourceforge.cobertura.datafile"] = cobSerFile

        doFirst {
            if (new File(classesDir).exists()) {
                logger.quiet "instrumenting classes for cobertura"
                ant {
                    // delete data file for cobertura, otherwise coverage would be added
                    delete(file:cobSerFile, failonerror:false)
                    // delete copy of original classes
                    delete(dir: copyOfClassesDir, failonerror:false)
                    // import cobertura task, so it is available in the script
                    taskdef(resource:'tasks.properties', classpath: configurations.testRuntime.asPath)
                    // create copy (backup) of original class files
                    copy(todir: copyOfClassesDir) {
                        fileset(dir: classesDir)
                    }
                    // instrument the relevant classes in-place
                    'cobertura-instrument'(datafile:cobSerFile) {
                        fileset(dir: classesDir,
                                //includes:"my/classes/**/*.class",
                                includes: "**/*.class",
                                excludes: "**/*Test.class")
                    }
                }
            }
        }

        doLast {
            logger.quiet "tidying up and generating cobertura report"
            if (new File(copyOfClassesDir).exists()) {
                // replace instrumented classes with backup copy again
                ant {
                    delete(file: classesDir)
                    move(file: copyOfClassesDir,
                            tofile: classesDir)
                }
                // create cobertura reports
                ant.'cobertura-report'(destdir:"${project.buildDir}/reports/cobertura",
                        format:'xml', srcdir:"src/main/java", datafile:cobSerFile)
                ant.'cobertura-report'(destdir:"${project.buildDir}/reports/cobertura",
                        format:'html', srcdir:"src/main/java", datafile:cobSerFile)
            }
        }
    }

}

